<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hm.com.dao.CourseToTeacherMapper">
  <resultMap id="BaseResultMap" type="hm.com.bean.CourseToTeacher">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
  </resultMap>
  <resultMap id="ResultMapWithTeacherAndCourse" type="hm.com.bean.CourseToTeacher">
    <id column="ctid" jdbcType="INTEGER" property="id" />
    <result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
    <association property="teacher" javaType="hm.com.bean.Teacher">
      <result column="college_id" jdbcType="INTEGER" property="collegeId" />
      <result column="tname" jdbcType="VARCHAR" property="name" />
      <result column="sex" jdbcType="BIT" property="sex" />
      <result column="email" jdbcType="VARCHAR" property="email" />
      <result column="phone" jdbcType="VARCHAR" property="phone" />
      <result column="address" jdbcType="VARCHAR" property="address" />
    </association>
    <association property="course" javaType="hm.com.bean.Course">
      <id column="cid" jdbcType="INTEGER" property="id" />
      <result column="cname" jdbcType="VARCHAR" property="name" />
      <result column="college_id" jdbcType="INTEGER" property="collegeId" />
      <result column="class_hour" jdbcType="INTEGER" property="classHour" />
      <result column="score" jdbcType="INTEGER" property="score" />
      <result column="required" jdbcType="BIT" property="required" />
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, teacher_id, course_id
  </sql>
  <select id="selectByExample" parameterType="hm.com.bean.CourseToTeacherExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_to_teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from course_to_teacher
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from course_to_teacher
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="hm.com.bean.CourseToTeacherExample">
    delete from course_to_teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="hm.com.bean.CourseToTeacher">
    insert into course_to_teacher (id, teacher_id, course_id
      )
    values (#{id,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="hm.com.bean.CourseToTeacher">
    insert into course_to_teacher
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="hm.com.bean.CourseToTeacherExample" resultType="java.lang.Long">
    select count(*) from course_to_teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update course_to_teacher
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null">
        teacher_id = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update course_to_teacher
    set id = #{record.id,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="hm.com.bean.CourseToTeacher">
    update course_to_teacher
    <set>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="hm.com.bean.CourseToTeacher">
    update course_to_teacher
    set teacher_id = #{teacherId,jdbcType=INTEGER},
      course_id = #{courseId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByCouseId" resultMap="ResultMapWithTeacherAndCourse">
      SELECT ct.id as ctid , ct.*,c.*,t.*,c.name as cname,t.name as tname
      FROM course_to_teacher ct
      LEFT JOIN course c
      ON c.id = ct.course_id
      LEFT JOIN teacher t
      ON t.id = ct.teacher_id
      WHERE ct.teacher_id is NOT null
      and c.id = #{courseId}
  </select>


<!--  List<CourseToTeacher> selectByTeacherId(@Param("teacherId")Integer teacherId);-->
  <select id="selectByTeacherId" resultMap="ResultMapWithTeacherAndCourse">
      SELECT ct.id as ctid , ct.*,c.*,t.*,c.name as cname,t.name as tname,c.id as cid
      FROM course_to_teacher ct
      LEFT JOIN course c
      ON c.id = ct.course_id
      LEFT JOIN teacher t
      ON t.id = ct.teacher_id
      WHERE ct.teacher_id is NOT null
      and t.id = #{teacherId}
  </select>
</mapper>